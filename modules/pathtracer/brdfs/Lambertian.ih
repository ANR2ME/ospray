#pragma once

#include "BRDF.ih"

struct Lambertian
{
  uniform BRDF base;
  vec3f R;
};

////////////////////////////////////////////////////////////////////////
// uniform Lambertian

inline vec3f uniform_Lambertian__eval(const uniform BRDF* uniform _this,
                                      const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const uniform Lambertian* uniform this = (const uniform Lambertian* uniform) _this;
  return mul(this->R, (1.0f/(float)(M_PI)) * clamp(dot(wi,dg.Ns)));
}

inline vec3f uniform_Lambertian__sample(const uniform BRDF* uniform _this,
                                        const vec3f &wo, 
                                        const DifferentialGeometry &dg, 
                                        Sample3f &wi, 
                                        const vec2f &s)  
{
  const uniform Lambertian* uniform this = (const uniform Lambertian* uniform) _this;
  wi = cosineSampleHemisphere(s.x,s.y,dg.Ns);
  return uniform_Lambertian__eval(&this->base, wo, dg, wi.v);
}

inline void Lambertian__Constructor(uniform Lambertian* uniform this, const uniform vec3f R)
{
  BRDF__Constructor(&this->base,DIFFUSE_REFLECTION,
                    uniform_Lambertian__eval,uniform_Lambertian__sample);
  this->R = R;
}

inline uniform Lambertian make_Lambertian(const uniform vec3f R) {
  uniform Lambertian v; Lambertian__Constructor(&v,R); return v;
}

////////////////////////////////////////////////////////////////////////
// varying Lambertian

inline vec3f varying_Lambertian__eval(const uniform BRDF* uniform _this,
                                      const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const varying Lambertian* uniform this = (const varying Lambertian* uniform) _this;
  return mul(this->R, (1.0f/(float)(M_PI)) * clamp(dot(wi,dg.Ns)));
}

inline vec3f varying_Lambertian__sample(const uniform BRDF* uniform _this,
                                        const vec3f &wo, 
                                        const DifferentialGeometry &dg, 
                                        Sample3f &wi, 
                                        const vec2f &s)  
{
  const varying Lambertian* uniform this = (const varying Lambertian* uniform) _this;
  wi = cosineSampleHemisphere(s.x,s.y,dg.Ns);
  return varying_Lambertian__eval(&this->base, wo, dg, wi.v);
}

inline void Lambertian__Constructor(varying Lambertian* uniform this, const varying vec3f R)
{
  BRDF__Constructor(&this->base,DIFFUSE_REFLECTION,
                    varying_Lambertian__eval,varying_Lambertian__sample);
  this->R = R;
}

inline varying Lambertian make_Lambertian(const varying vec3f R) {
  varying Lambertian v; Lambertian__Constructor(&v,R); return v;
}
