#pragma once

#include "brdf.isph"
#include "optics.isph"

struct Reflection
{
  uniform BRDF base;
  vec3f reflectance;     /*! reflectivity of the mirror */

};

///////////////////////////////////////////////////////////////////////////////
// uniform Reflection

inline vec3f uniform_Reflection__eval(const uniform BRDF* uniform _this,
                                      const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  return make_vec3f(0.0f);
}

inline vec3f uniform_Reflection__sample(const uniform BRDF* uniform _this,
                                        const vec3f &wo, const DifferentialGeometry &dg, Sample3f &wi, const vec2f &s)  
{
  const uniform Reflection* uniform this = (const uniform Reflection* uniform) _this;
  wi = reflect(wo,dg.Ns);
  return this->reflectance;
}

inline void Reflection__Constructor(uniform Reflection* uniform this, const uniform vec3f reflectance)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,
                    uniform_Reflection__eval,uniform_Reflection__sample);
  this->reflectance = reflectance;
}

///////////////////////////////////////////////////////////////////////////////
// varying Reflection

inline vec3f varying_Reflection__eval(const uniform BRDF* uniform _this,
                                      const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  return make_vec3f(0.0f);
}

inline vec3f varying_Reflection__sample(const uniform BRDF* uniform _this,
                                        const vec3f &wo, const DifferentialGeometry &dg, Sample3f &wi, const vec2f &s)  
{
  const varying Reflection* uniform this = (const varying Reflection* uniform) _this;
  wi = reflect(wo,dg.Ns);
  return this->reflectance;
}

inline void Reflection__Constructor(varying Reflection* uniform this, const varying vec3f reflectance)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,
                    varying_Reflection__eval,varying_Reflection__sample);
  this->reflectance = reflectance;
}
