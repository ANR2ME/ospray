#pragma once

#include "brdf.ih"

struct DielectricReflection
{
  uniform BRDF base;
  float eta;
};

///////////////////////////////////////////////////////////////////////////////
// uniform DielectricReflection

inline vec3f uniform_DielectricReflection__eval(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) {
  return make_vec3f(0.f);
}

inline vec3f uniform_DielectricReflection__sample(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, Sample3f &wi, const vec2f &s)
{
  const uniform DielectricReflection* uniform this = (const uniform DielectricReflection* uniform) _this;
  const float cosThetaO = clamp(dot(wo,dg.Ns));
  wi = reflect(wo,dg.Ns,cosThetaO);
  return make_vec3f(fresnelDielectric(cosThetaO,this->eta));
}

inline void DielectricReflection__Constructor(uniform DielectricReflection* uniform this,
                                              const uniform float etai,
                                              const uniform float etat)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,
                    uniform_DielectricReflection__eval,uniform_DielectricReflection__sample);
  this->eta = etai*rcp(etat);
}

inline uniform DielectricReflection make_DielectricReflection(const uniform float etai, const uniform float etat) {
  uniform DielectricReflection v; DielectricReflection__Constructor(&v,etai,etat); return v;
}

///////////////////////////////////////////////////////////////////////////////
// varying DielectricReflection

inline vec3f varying_DielectricReflection__eval(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) {
  return make_vec3f(0.f);
}

inline vec3f varying_DielectricReflection__sample(const uniform BRDF* uniform _this, const vec3f &wo, const DifferentialGeometry &dg, Sample3f &wi, const vec2f &s)
{
  const varying DielectricReflection* uniform this = (const varying DielectricReflection* uniform) _this;
  const float cosThetaO = clamp(dot(wo,dg.Ns));
  wi = reflect(wo,dg.Ns,cosThetaO);
  return make_vec3f(fresnelDielectric(cosThetaO,this->eta));
}

inline void DielectricReflection__Constructor(varying DielectricReflection* uniform this,
                                              const varying float etai,
                                              const varying float etat)
{
  BRDF__Constructor(&this->base,SPECULAR_REFLECTION,
                    varying_DielectricReflection__eval,varying_DielectricReflection__sample);
  this->eta = etai*rcp(etat);
}

inline varying DielectricReflection make_DielectricReflection(const varying float etai, const varying float etat) {
  varying DielectricReflection v; DielectricReflection__Constructor(&v,etai,etat); return v;
}
