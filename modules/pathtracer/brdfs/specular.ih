/********************************************************************* *\
 * INTEL CORPORATION PROPRIETARY INFORMATION                            
 * This software is supplied under the terms of a license agreement or  
 * nondisclosure agreement with Intel Corporation and may not be copied 
 * or disclosed except in accordance with the terms of that agreement.  
 * Copyright (C) 2014 Intel Corporation. All Rights Reserved.           
 ********************************************************************* */

#pragma once

#include "brdf.ih"
#include "optics.ih"

struct Specular
{
  uniform BRDF base;

  /*! The reflectivity parameter. The range is [0,1] where 0 means
   *  no reflection at all, and 1 means full reflection. */
  vec3f R;
  
  /*! The exponent that determines the glossiness. The range is
   *  [0,infinity[ where 0 means a diffuse surface, and the
   *  specularity increases towards infinity. */
  float exp;
};

inline vec3f Specular__eval(const uniform BRDF* uniform _this,
                            const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const varying Specular* uniform this = (const varying Specular* uniform) _this;
  const Sample3f refl = reflect(wo,dg.Ns);
  if (dot(refl.v,wi) < 0.0f) return make_vec3f(0.0f);
  return mul(this->R, (this->exp+2) * one_over_two_pi * pow(dot(refl.v,wi),this->exp) * clamp(dot(wi,dg.Ns)));
}

inline vec3f Specular__sample(const uniform BRDF* uniform _this,
                                const vec3f &wo, 
                                const DifferentialGeometry &dg, 
                                Sample3f &wi, 
                                const vec2f &s)  
{
  const varying Specular* uniform this = (const varying Specular* uniform) _this;
  const Sample3f refl = reflect(wo,dg.Ns);
  wi = powerCosineSampleHemisphere(s.x,s.y,refl.v,this->exp);
  return Specular__eval(&this->base, wo, dg, wi.v);
}

inline void Specular__Constructor(varying Specular* uniform this,
                                  const varying vec3f R,
                                  const varying float exp_)
{
  BRDF__Constructor(&this->base,GLOSSY_REFLECTION,Specular__eval,Specular__sample);
  this->R = R;
  this->exp = exp_;
}
