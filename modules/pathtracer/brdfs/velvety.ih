#pragma once

#include "brdf.ih"

struct Velvety
{
  uniform BRDF base;

  /*! The reflectance parameter. The vale 0 means no reflection,
   *  and 1 means full reflection. */
  vec3f R;
  
  /*! The falloff of horizon scattering. 0 no falloff,
   *  and inf means maximum falloff. */
  float f;
};

///////////////////////////////////////////////////////////////////////////////
// uniform Velvety

vec3f uniform_Velvety__eval(const uniform BRDF* uniform _this,
                            const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const uniform Velvety* uniform this = (const uniform Velvety* uniform) _this;
  const float cosThetaO = clamp(dot(wo,dg.Ns));
  const float cosThetaI = clamp(dot(wi,dg.Ns));
  const float sinThetaO = sqrt(1.0f - cosThetaO * cosThetaO);
  const float horizonScatter = pow(sinThetaO, this->f);
  return mul(horizonScatter * cosThetaI * one_over_pi, this->R);
}

vec3f uniform_Velvety__sample(const uniform BRDF* uniform _this,
                              const vec3f &wo, 
                              const DifferentialGeometry &dg, 
                              Sample3f &wi, 
                              const vec2f &s)  
{
  const uniform Velvety* uniform this = (const uniform Velvety* uniform) _this;
  wi = cosineSampleHemisphere(s.x,s.y,dg.Ns);
  return uniform_Velvety__eval(_this, wo, dg, wi.v);
}

void Velvety__Constructor(uniform Velvety* uniform this, const uniform vec3f R, const uniform float f) 
{
  BRDF__Constructor(&this->base,DIFFUSE_REFLECTION,
                    uniform_Velvety__eval,uniform_Velvety__sample);
  this->R = R;
  this->f = f;
}

uniform Velvety make_Velvety(const uniform vec3f R, const uniform float f) { 
  uniform Velvety m; Velvety__Constructor(&m,R,f); return m; 
}

///////////////////////////////////////////////////////////////////////////////
// varying Velvety

vec3f varying_Velvety__eval(const uniform BRDF* uniform _this,
                            const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  const varying Velvety* uniform this = (const varying Velvety* uniform) _this;
  const float cosThetaO = clamp(dot(wo,dg.Ns));
  const float cosThetaI = clamp(dot(wi,dg.Ns));
  const float sinThetaO = sqrt(1.0f - cosThetaO * cosThetaO);
  const float horizonScatter = pow(sinThetaO, this->f);
  return mul(horizonScatter * cosThetaI * one_over_pi, this->R);
}

vec3f varying_Velvety__sample(const uniform BRDF* uniform _this,
                              const vec3f &wo, 
                              const DifferentialGeometry &dg, 
                              Sample3f &wi, 
                              const vec2f &s)  
{
  const varying Velvety* uniform this = (const varying Velvety* uniform) _this;
  wi = cosineSampleHemisphere(s.x,s.y,dg.Ns);
  return varying_Velvety__eval(_this, wo, dg, wi.v);
}

void Velvety__Constructor(varying Velvety* uniform this, const varying vec3f R, const varying float f) 
{
  BRDF__Constructor(&this->base,DIFFUSE_REFLECTION,
                    varying_Velvety__eval,varying_Velvety__sample);
  this->R = R;
  this->f = f;
}

varying Velvety make_Velvety(const varying vec3f R, const varying float f) { 
  varying Velvety m; Velvety__Constructor(&m,R,f); return m; 
}
