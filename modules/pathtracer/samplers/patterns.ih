#pragma once

#include "../default.ih"
#include "Random.ih"
#include "Permutation.ih"

/*! Create a set of n jittered 1D samples, using the provided 
 *  random number generator. */
inline void jittered(varying float* uniform samples, const uniform int n, varying Random& rng)
{
  uniform float scale = 1.0f / n;
  uniform VaryingPermutation permutation; 
  VaryingPermutation__Constructor(&permutation,n,rng);
  for (uniform int i = 0; i < n; i++) {
    samples[VaryingPermutation__get(&permutation,i)] = ((float)i + Random__getFloat(&rng)) * scale;
  }
  VaryingPermutation__Destructor(&permutation);
}

/*! Create a set of n multi-jittered 2D samples, using the provided 
 *  random number generator. */
inline void multiJittered(varying vec2f* uniform samples, const uniform int N, varying Random& rng)
{
  uniform int b = (int)sqrt((float)N);
  if (b*b < N) b++;
  varying vec2f* uniform _grid = uniform new varying vec2f[b*b+1];
  varying vec2f* uniform grid = (varying vec2f* uniform) align_ptr(_grid); 
  
  for (uniform int i = 0; i < b; i++) {
    uniform VaryingPermutation permutation; 
    VaryingPermutation__Constructor(&permutation, b, rng);
    for (uniform int j = 0; j < b; j++) {
      grid[i*b+j].x = (float)i/(float)b + (VaryingPermutation__get(&permutation,j)+Random__getFloat(&rng))/(float)(b*b);
    }
    VaryingPermutation__Destructor(&permutation);
  }

  for (uniform int i = 0; i < b; i++) {
    uniform VaryingPermutation permutation; 
    VaryingPermutation__Constructor(&permutation, b, rng);
    for (uniform int j = 0; j < b; j++) {
      grid[j*b+i].y = (float)i/(float)b + (VaryingPermutation__get(&permutation,j)+Random__getFloat(&rng))/(float)(b*b);
    }
    VaryingPermutation__Destructor(&permutation);
  }

  uniform int counter = 0;
  uniform VaryingPermutation permutation; 
  VaryingPermutation__Constructor(&permutation, N, rng);
  for (uniform int n=0; n<N; n++) {
    varying int np = VaryingPermutation__get(&permutation,n);
    varying int i = np/b;
    varying int j = np-i*b;
    samples[n] = grid[i*b+j];
  }
  VaryingPermutation__Destructor(&permutation);

  delete[] _grid;
}
