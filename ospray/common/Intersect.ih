// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// Ray intersection structures //////////////////////////////////////////////

struct HitValues{
  bool hit;
  float u;
  vec3f N;
  float t_value;
};

struct IntersectionValues{
  HitValues t_in;
  HitValues t_out;
};

// Ray intersection helpers ///////////////////////////////////////////////////

// robust ray-sphere intersection
inline IntersectionValues intersectSphere(const vec3f &rayOrg,
                            const vec3f &rayDir,
                            const uniform vec3f &center,
                            const uniform float radius)
{
  IntersectionValues isect;
  isect.t_in.hit = false;
  isect.t_out.hit = false;
  isect.t_in.t_value = inf;
  isect.t_out.t_value = -inf;

  const vec3f d   = rayDir;
  const float rd2 = 1.0f / dot(d, d);  // 1/a
  const vec3f CO  = center - rayOrg;
  // transformation to avoid missing a small sphere which is far away:
  // the standard c=CO^2-r^2 would quickly loose term r due to float arithmetic
  const float projCO     = dot(CO, d) * rd2;  // in ray-space
  const vec3f perp       = CO - projCO * d;
  const float l2         = dot(perp, perp);
  const uniform float r2 = sqr(radius);
  if (l2 > r2)
    return isect;
  float td          = sqrt((r2 - l2) * rd2);
  const float t_in  = projCO - td;
  const float t_out = projCO + td;

  // above solutions are problematic if rays starts close to the sphere
  // (due to catastrophic cancellation, because then |projCO| ~ td)
  // the usual recommendation is to choose the one solution with same sign:
  //   const float t1 = projCO + floatbits(signbits(projCO)|intbits(td));
  // and compute the other solution via t1*t2=c/a:
  //   const float t2 = (dot(CO, CO) - r2) / t1 * rd2;
  // this is more precise, but still problematic in particular for large
  // spheres, because |CO| ~ r; slightly better alternative, but costly sqrt:
  //   const float f = sqrt(dot(CO, CO));
  //   const float t2 = (f - radius) * (f + radius) / t1 * rd2;
  // the only variant I found that has high enough precision to avoid
  // self-intersections of 2ndary rays is to (re-)compute most terms (CO, dot,
  // r2, t2) with doubles; large spheres are a rare usecase for OSPRay, thus we
  // use instead as a workaround an additional, radius-dependent epsilon

  isect.t_in.hit = true;
  isect.t_out.hit = true;
  isect.t_in.t_value = t_in;
  isect.t_out.t_value = t_out;

  // cannot easily be moved to postIntersect
  // we need hit in object space, in postIntersect it is in world-space
  isect.t_in.N = -td * d - perp;
  isect.t_out.N = td * d - perp;

  return isect;
}


// robust ray-cylinder intersection
inline IntersectionValues intersectCylinder(const vec3f &rayOrg,
                              const vec3f &rayDir,
                              const uniform vec3f &v0,
                              const uniform vec3f &v1,
                              const uniform float radius)
{
  IntersectionValues isect;
  isect.t_in.hit = false;
  isect.t_out.hit = false;
  isect.t_in.t_value = inf;
  isect.t_out.t_value = -inf;

  const vec3f d         = rayDir;
  const uniform vec3f s = v1 - v0;  // axis
  const vec3f sxd       = cross(s, d);
  const float a         = dot(sxd, sxd);  // (s x d)^2
  if (a == 0.f)
    return isect;
  const vec3f f   = v0 - rayOrg;
  const vec3f sxf = cross(s, f);
  const float ra  = 1.0f / a;
  const float ts = dot(sxd, sxf) * ra;       // (s x d)(s x f) / (s x d)^2, in ray-space
  const vec3f fp = f - ts * d;  // f' = v0 - closest point to axis

  const uniform float s2 = dot(s, s);             // s^2
  const vec3f perp       = cross(s, fp);          // s x f'
  const float c = sqr(radius) * s2 - dot(perp, perp);  //  r^2 s^2 - (s x f')^2
  if (c < 0.f)
    return isect;

  float td         = sqrt(c * ra);
  const float tin  = ts - td;
  const float tout = ts + td;

  // clip to cylinder caps
  const float sf  = dot(s, f);
  const float sd  = dot(s, d);
  const float rsd = rcp(sd);
  const float tA  = sf * rsd;
  const float tB  = tA + s2 * rsd;

  const float cap_tin = min(tA, tB);
  const float cap_tout = max(tA, tB);

  if(and(tin > cap_tin, tin < cap_tout))
  {
    isect.t_in.hit = true;
    isect.t_in.t_value = tin;
    // cannot easily be moved to postIntersect
    // we need hit in object-space, in postIntersect it is in world-space
    isect.t_in.u = (tin * sd - sf) * rcp(s2);
    isect.t_in.N = -td * d - fp - isect.t_in.u * s;
  }
  if(and(tout > cap_tin, tout < cap_tout))
  {
    isect.t_out.hit = true;
    isect.t_out.t_value = tout;
    isect.t_out.u = (tout * sd - sf) * rcp(s2);
    isect.t_out.N = td * d - fp - isect.t_out.u * s;
  }

  return isect;
}


inline IntersectionValues intersectCapsule(const vec3f &rayOrg,
                              const vec3f &rayDir,
                              const uniform vec3f &v0,
                              const uniform vec3f &v1,
                              const uniform float radius)
{
  IntersectionValues isect_pipe = intersectCylinder(rayOrg, rayDir, v0, v1, radius);
  IntersectionValues isect_sph1 = intersectSphere(rayOrg, rayDir, v0, radius);
  IntersectionValues isect_sph2 = intersectSphere(rayOrg, rayDir, v1, radius);

  const float t_in = min(min(isect_sph1.t_in.t_value, isect_sph2.t_in.t_value),
                               isect_pipe.t_in.t_value);
  const float t_out = max(max(isect_sph1.t_out.t_value, isect_sph2.t_out.t_value),
                                isect_pipe.t_out.t_value);

  isect_pipe.t_in.hit = isect_pipe.t_in.hit || isect_sph1.t_in.hit || isect_sph2.t_in.hit;
  isect_pipe.t_in.t_value = t_in;
  isect_pipe.t_out.hit = isect_pipe.t_out.hit || isect_sph1.t_out.hit || isect_sph2.t_out.hit;
  isect_pipe.t_out.t_value = t_out;

    if (isect_sph1.t_in.t_value == t_in) {
        isect_pipe.t_in.u = 0.f;
        isect_pipe.t_in.N = isect_sph1.t_in.N;
    }
    else if (isect_sph2.t_in.t_value == t_in) {
        isect_pipe.t_in.u = 1.f;
        isect_pipe.t_in.N = isect_sph2.t_in.N;
    }

    if (isect_sph1.t_out.t_value == t_out) {
        isect_pipe.t_out.u = 0.f;
        isect_pipe.t_out.N = isect_sph1.t_out.N;
    }
    else if (isect_sph2.t_out.t_value == t_out) {
        isect_pipe.t_out.u = 1.f;
        isect_pipe.t_out.N = isect_sph2.t_out.N;
    }

  return isect_pipe;

}

inline IntersectionValues intersectBox(const vec3f &rayOrg,
                         const vec3f &rayDir,
                         const uniform box3f &box)
{
  IntersectionValues isect;

  const vec3f mins = (box.lower - rayOrg) * rcp_safe(rayDir);
  const vec3f maxs = (box.upper - rayOrg) * rcp_safe(rayDir);

  isect.t_in.t_value = reduce_max(min(mins, maxs));
  isect.t_out.t_value = reduce_min(max(mins, maxs));
  isect.t_in.hit = isect.t_in.t_value < isect.t_out.t_value;
  isect.t_out.hit = isect.t_in.hit;

  if (isect.t_in.hit) {
    // Calculate geometry normal
    const vec3f c = rayOrg - (box.lower + box.upper) * 0.5f;
    const vec3f d = rcp(box_size(box) * 0.4999f); // include bias

    const vec3f p_in = c + isect.t_in.t_value * rayDir;
    const vec3f p_out = c + isect.t_out.t_value * rayDir;

    isect.t_in.N = make_vec3f(make_vec3i(p_in * d));
    isect.t_out.N = make_vec3f(make_vec3i(p_out * d));
  }
  return isect;

}

inline IntersectionValues intersectPlane(const vec3f &rayOrg,
                            const vec3f &rayDir,
                            const uniform vec4f &plane)
{
  IntersectionValues isect;
  isect.t_in.hit = false;
  const uniform vec3f normal = make_vec3f(plane);
  if(dot(rayDir, normal) != 0)
      isect.t_in.hit = true;
  isect.t_in.N = normal;
  isect.t_in.t_value = (plane.w - dot(rayOrg, normal)) * rcpf(dot(rayDir, normal));

  return isect;
}
