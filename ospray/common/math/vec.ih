/*! \file math.ih implements common math functionality for ISPC */

#ifndef OSPRAY_VEC_ISPH
#define OSPRAY_VEC_ISPH

#include "math.ih"

struct Foo {
};

#define __define_ispc_vector2(TYPE,ABB)         \
  struct vec2##ABB {                            \
    TYPE x; TYPE y;                             \
  };                                            \
  
#define __define_ispc_vector3(TYPE,ABB)         \
  struct vec3##ABB {                            \
    TYPE x,y,z;                                 \
  };                                            \
  struct vec3##ABB##a {                         \
    TYPE x,y,z,a;                               \
  };                                            \
  
#define __define_ispc_vector4(TYPE,ABB)         \
  struct vec4##ABB {                            \
    TYPE x,y,z,w;                               \
  };                                            \

__define_ispc_vector2(int,i);
__define_ispc_vector2(unsigned int,ui);
__define_ispc_vector2(float,f);

__define_ispc_vector3(int,i);
__define_ispc_vector3(unsigned int,ui);
__define_ispc_vector3(float,f);

__define_ispc_vector4(int,i);
__define_ispc_vector4(unsigned int,ui);
__define_ispc_vector4(float,f);

#undef __define_ispc_vector2
#undef __define_ispc_vector3
#undef __define_ispc_vector4




/*! defines all constructors "make_vec2[T]" for 2-vector type */
#define __define_ispc_constructors2(UV,TYPE,ABB,ITYPE,IABB) \
  inline UV vec2##ABB make_vec2##ABB(const UV ITYPE x,      \
                                     const UV ITYPE y)      \
  {                                                         \
    UV vec2##ABB ret;                                       \
    ret.x = x;                                              \
    ret.y = y;                                              \
    return ret;                                             \
  }                                                         \
  
/*! defines all constructors "make_vec3[T]" and "make_vec3[T]a" for
  3-vector type */
#define __define_ispc_constructors3(UV,TYPE,ABB,ITYPE,IABB)   \
  inline UV vec3##ABB make_vec3##ABB(const UV ITYPE x,        \
                                     const UV ITYPE y,        \
                                     const UV ITYPE z)        \
  {                                                           \
    UV vec3##ABB ret;                                         \
    ret.x = x;                                                \
    ret.y = y;                                                \
    ret.z = z;                                                \
    return ret;                                               \
  }                                                           \
  inline UV vec3##ABB##a make_vec3##ABB##a(const UV ITYPE x,  \
                                           const UV ITYPE y,  \
                                           const UV ITYPE z)  \
  {                                                           \
    UV vec3##ABB##a ret;                                      \
    ret.x = x;                                                \
    ret.y = y;                                                \
    ret.z = z;                                                \
    return ret;                                               \
  }                                                           \
  
/*! defines all constructors "make_vec4[T]" for 4-vector type */
#define __define_ispc_constructors4(UV,TYPE,ABB,ITYPE,IABB) \
  inline UV vec4##ABB make_vec4##ABB(const UV ITYPE x,      \
                                     const UV ITYPE y,      \
                                     const UV ITYPE z,      \
                                     const UV ITYPE w)      \
  {                                                         \
    UV vec4##ABB ret;                                       \
    ret.x = x;                                              \
    ret.y = y;                                              \
    ret.z = z;                                              \
    ret.w = w;                                              \
    return ret;                                             \
  }                                                         \
  inline UV vec4##ABB make_vec4##ABB(const UV vec4##IABB v) \
  {                                                         \
    UV vec4##ABB ret;                                       \
    ret.x = v.x;                                            \
    ret.y = v.y;                                            \
    ret.z = v.z;                                            \
    ret.w = v.w;                                            \
    return ret;                                             \
  }                                                         \
  
#define __define_ispc_constructors_uv_t(UV,OTYPE,OABB,ITYPE,IABB) \
  __define_ispc_constructors2(UV,OTYPE,OABB,ITYPE,IABB)           \
  __define_ispc_constructors3(UV,OTYPE,OABB,ITYPE,IABB)           \
  __define_ispc_constructors4(UV,OTYPE,OABB,ITYPE,IABB)           \
  
#define __define_ispc_constructors_uv(UV,TYPE,ABB)              \
  __define_ispc_constructors_uv_t(UV,TYPE,ABB,int,i)            \
  __define_ispc_constructors_uv_t(UV,TYPE,ABB,unsigned int,ui)  \
  __define_ispc_constructors_uv_t(UV,TYPE,ABB,float,f)          \
  
#define __define_ispc_constructors(UV)              \
  __define_ispc_constructors_uv(UV,unsigned int,ui) \
  __define_ispc_constructors_uv(UV,int,i)           \
  __define_ispc_constructors_uv(UV,float,f)         \
  
__define_ispc_constructors(uniform);
__define_ispc_constructors(varying);

#undef __define_ispc_constructors2
#undef __define_ispc_constructors3
#undef __define_ispc_constructors3a
#undef __define_ispc_constructors4
#undef __define_ispc_constructors_uv
#undef __define_ispc_constructors


// for now, let's implement those manually - should eventually do those via a macro!
inline uniform vec3f operator*(const uniform vec3f &v, const uniform float f)
{ return make_vec3f(v.x*f,v.y*f,v.z*f); }
inline vec3f operator*(const vec3f &v, const float f)
{ return make_vec3f(v.x*f,v.y*f,v.z*f); }
inline uniform vec3f operator*(const uniform float f, const uniform vec3f &v)
{ return make_vec3f(v.x*f,v.y*f,v.z*f); }
inline vec3f operator*(const float f, const vec3f &v)
{ return make_vec3f(v.x*f,v.y*f,v.z*f); }

inline uniform float dot(const uniform vec3f &a, const uniform vec3f &b)
{ return a.x*b.x+a.y*b.y+a.z*b.z; }
inline float dot(const vec3f &a, const vec3f &b)
{ return a.x*b.x+a.y*b.y+a.z*b.z; }

inline uniform vec3f normalize(const uniform vec3f &v) 
{ return v * (1.f/sqrt(dot(v,v))); }
inline vec3f normalize(const vec3f &v) 
{ return v * (1.f/sqrt(dot(v,v))); }

#endif

