// AK: similar but not identical to ray.isph in embree_ispc

#pragma once

#include "math/vec.isph"

/*! Ray structure. Contains all information about a ray including
 *  precomputed reciprocal direction. */
struct Ray
{
  vec3f org;     //!< Ray origin
  vec3f dir;     //!< Ray direction
  vec3f dir_rcp; //!< Ray inverse direction
  float tnear;   //!< Start of ray segment
  float tfar;    //!< End of ray segment
  float u;       //!< Barycentric u coordinate of hit
  float v;       //!< Barycentric v coordinate of hit
  int id0;       //!< 1st primitive ID
  int id1;       //!< 2nd primitive ID
  vec3f Ng;      //!< Geometric normal.
  int mask;      //!< used to mask out objects during traversal
  float time;    //!< Time of this ray for motion blur.
  vec4f color;   //!< Integrated color for volume rendering, tranparency
  float rda;     //!< Acceleration along ray for quadratic sampling
};

/*! Constructs a ray from origin, direction, and ray segment. Near
 *  has to be smaller than far. */
inline Ray make_Ray(const vec3f org, 
                    const vec3f dir, 
                    const float tnear, 
                    const float tfar)
{
  Ray ray;
  ray.org = org;
  ray.dir = dir;
  ray.dir_rcp = rcp(dir);
  ray.tnear = tnear;
  ray.tfar = tfar;
  ray.id0 = -1;
  ray.id1 = -1;
  ray.mask = -1;
  ray.time = 0;
  ray.color = make_vec4f(0);
  return ray;
}

/*! Constructs a ray from origin, direction, and ray segment. Near
 *  has to be smaller than far. */
inline Ray make_Ray(const vec3f org, 
                    const vec3f dir)
{
  Ray ray;
  ray.org  = org;
  ray.dir  = dir;
  ray.dir_rcp = rcp(dir);
  ray.tnear = 0.0f;
  ray.tfar  = inf;
  ray.id0 = -1;
  ray.id1 = -1;
  ray.mask = -1;
  ray.time = 0;
  ray.color = make_vec4f(0);
  return ray;
}

inline void init_Ray(Ray &ray,
                     const vec3f org, 
                     const vec3f dir, 
                     const float tnear, 
                     const float tfar)
{
  ray.org = org;
  ray.dir = dir;
  ray.dir_rcp = rcp(dir);
  ray.tnear = tnear;
  ray.tfar = tfar;
  ray.id0 = -1;
  ray.id1 = -1;
  ray.mask = -1;
  ray.time = 0;
  ray.color = make_vec4f(0);
}

inline void init_Ray(Ray &ray,
                     const vec3f org, 
                     const vec3f dir)
{
  ray.org = org;
  ray.dir = dir;
  ray.dir_rcp = rcp(dir);
  ray.tnear = 0.0f;
  ray.tfar = inf;
  ray.id0 = -1;
  ray.id1 = -1;
  ray.mask = -1;
  ray.time = 0;
  ray.color = make_vec4f(0);
}

inline bool noHit(const Ray& r) { return r.id0 < 0; }

inline bool hadHit(const Ray& r) { return r.id0 >= 0; }
