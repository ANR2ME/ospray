/********************************************************************* *\
 * INTEL CORPORATION PROPRIETARY INFORMATION                            
 * This software is supplied under the terms of a license agreement or  
 * nondisclosure agreement with Intel Corporation and may not be copied 
 * or disclosed except in accordance with the terms of that agreement.  
 * Copyright (C) 2014 Intel Corporation. All Rights Reserved.           
 ********************************************************************* */

#pragma once

#include "ospray/common/ospcommon.ih"
#include "ospray/math/region.ih"
#include "tilesize.h"

/*! a screen tile. the memory layout of this class has to _exactly_
  match the (C++-)one in tile.h */
struct Tile {
  uniform float  r[TILE_SIZE*TILE_SIZE]; /*! red */
  uniform float  g[TILE_SIZE*TILE_SIZE]; /*! green */
  uniform float  b[TILE_SIZE*TILE_SIZE]; /*!< blue */
  uniform float  a[TILE_SIZE*TILE_SIZE]; /*!< alpha */
  uniform float  z[TILE_SIZE*TILE_SIZE]; /*!< depth */
  uniform region2i region;
  uniform vec2i    fbSize;
  uniform vec2f    rcp_fbSize;
};

inline vec4f setRGBA(uniform Tile &tile, varying uint32 i, const varying vec4f rgba)
{ 
  tile.r[i] = rgba.x;
  tile.g[i] = rgba.y;
  tile.b[i] = rgba.z;
  tile.a[i] = rgba.w;
}

inline void setRGBA(uniform Tile &tile, const varying uint32 i,
                    const varying vec3f rgb, const varying float alpha=0.f)
{
  tile.r[i] = rgb.x;
  tile.g[i] = rgb.y;
  tile.b[i] = rgb.z;
  tile.a[i] = alpha;
}

inline void setRGBAZ(uniform Tile &tile, const varying uint32 i,
                     const varying vec3f rgb, 
                     const varying float alpha,
                     const varying float z)
{
  // print("rgb.r %\n",rgb.x);
  // print("rgb.g %\n",rgb.y);
  // print("rgb.b %\n",rgb.z);
  // print("rgb.a %\n",alpha);
  // print("rgb.z %\n",z);
  // print("i %\n",i);
  // print("&tile %\n",&tile);
  // print("&r[i] %\n",&tile.r[i]);
  tile.r[i] = rgb.x;
  tile.g[i] = rgb.y;
  tile.b[i] = rgb.z;
  tile.a[i] = alpha;
  tile.z[i] = z;
}

inline void setRGBA(uniform Tile &tile, const varying uint32 i,
                    const varying vec4f rgba)
{
  tile.r[i] = rgba.x;
  tile.g[i] = rgba.y;
  tile.b[i] = rgba.z;
  tile.a[i] = rgba.w;
}

inline varying vec4f getRGBA(uniform Tile &tile, const varying uint32 i)
{ return make_vec4f(tile.r[i],tile.g[i],tile.b[i],tile.a[i]); }


