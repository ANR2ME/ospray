/*! \file ospray/ospray.h Public OSPRay API definition file (core components)

  This file defines the public API for the OSPRay core. Since many of
  OSPRays components are intentionally realized in specific modules
  this file will *only* define the very *core* components, with all
  extensions/modules implemented in the respective modules.
 */

// -------------------------------------------------------
// include embree components 
// -------------------------------------------------------
#include "common/math/vec2.h"
#include "common/math/vec3.h"
#include "common/math/bbox.h"

/*! namespace for classes in the public core API */
namespace osp {
  typedef embree::Vec2i  vec2i;
  typedef embree::Vec3f  vec3f;
  typedef embree::Vec3fa vec3fa;

  struct ManagedObject { unsigned long ID; virtual ~ManagedObject() {} };
  struct FrameBuffer : public ManagedObject {};
  struct Renderer    : public ManagedObject {};
  struct Model       : public ManagedObject {};
}

typedef osp::FrameBuffer *OSPFrameBuffer;
typedef osp::Renderer    *OSPRenderer;
typedef osp::Model       *OSPModel;

/*! \defgroup cplusplus_api Public OSPRay Core API */
/*! @{ */
extern "C" {
  /*! initialize the ospray engine (for single-node user application) */
  void ospInit(int *ac, const char ***av);
  /*! use renderer to render given model into specified frame buffer */
  void ospRenderFrame(OSPFrameBuffer fb, OSPRenderer renderer, OSPModel model);
  // -------------------------------------------------------
  /*! \defgroup ospray_framebuffer Frame Buffer Manipulation API */
  /*! @{ */
  {  
    /*! create a new framebuffer (actual format is internal to ospray) */
    OSPFrameBuffer ospNewFrameBuffer(const osp::vec2i &size);
    /*! destroy a framebuffer */
    void ospDestroyFrameBuffer(OSPFrameBuffer fb);
  }
  /*! @} end of ospray_framebuffer */

}
/*! @} */
