// ======================================================================== //
// Copyright 2009-2016 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/common/DifferentialGeometry.ih"

struct Light;

struct LightSample
{
  vec3f weight;    //!< radiance that arrives at the given point divided by pdf
  vec3f direction; //!< direction towards the light source
  float distance;  //!< largest valid t_far value for a shadow ray
  float pdf;       //!< probability density that this sample was taken
};

//! compute the weighted radiance at a point caused by a sample on the light source
// by convention, giving (0, 0) as "random" numbers should sample the "center"
// of the light source (used by the raytracing renderers such as the OBJ renderer)
typedef varying LightSample (*Light_SampleFunc)(const uniform Light *uniform,
      /*! point to generate the sample for >*/  const varying DifferentialGeometry&,
 /*! random numbers to generate the sample >*/  const varying vec2f &s);


struct LightEval
{
  vec3f radiance;  //!< radiance that arrives at the given point (not weighted by pdf)
  float distance;
  float pdf;       //!< probability density that the direction would have been sampled
};

//! compute the radiance, distance and pdf caused by the light source (pointed to by the given direction)
typedef varying LightEval (*Light_EvalFunc)(const uniform Light *uniform,
/*! point to evaluate illumination for >*/  const varying DifferentialGeometry&,
/*! direction towards the light source >*/  const varying vec3f &dir);


struct Light
{
  Light_SampleFunc sample;
  Light_EvalFunc eval;
};


varying LightEval Light_eval(const uniform Light *uniform, const varying DifferentialGeometry&, const varying vec3f&);

inline void Light_Constructor(uniform Light *uniform self)
{
  self->eval = Light_eval;
}
