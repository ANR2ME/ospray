// ======================================================================== //
// Copyright 2009-2014 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Light.ih"
#include "ospray/math/vec.ih"

struct PointLight {
  uniform Light base;     //!< inherited light fields

  uniform vec3f position; //!< light position
  uniform vec3f color;    //!< light color

  uniform float range;  //!< max range at which the light will have an effect
};

//! Compute the radiance at a point from a sample on the light sans occluders, return the extant light vector and distance.
varying vec3f PointLight_computeRadiance(void *uniform light, const varying vec3f &coordinates, varying vec3f &direction, varying float &distance);

//! Construct a new ispc-side PointLight object
extern void PointLight_Constructor( uniform PointLight *uniform THIS,
                                    void *uniform cppEquivalent,
                                    const uniform vec3f &position,
                                    const uniform vec3f &color,
                                    const uniform float range);

//! Destroy an ispc-side PointLight object
extern void PointLight_Destructor(uniform PointLight *uniform THIS);

