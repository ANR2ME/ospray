// ======================================================================== //
// Copyright 2009-2014 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Light.ih"
#include "ospray/math/vec.ih"

struct SpotLight;

struct SpotLight {
  uniform Light base;

  uniform vec3f position;         //!< Position of the SpotLight
  uniform vec3f direction;        //!< Direction that the SpotLight is pointing
  uniform vec3f color;            //!< RGB color of the SpotLight
  uniform float range;            //!< Max influence range of the SpotLight
  uniform float halfAngle;        //!< Half angle of spot light. If angle from intersection to light is greater than this, the light does not influence shading for that intersection
  uniform float angularLimit;     //!< Angular limit of the spot in an easier to use form: cosine of the half angle in radians.
};

//! Compute the radiance at a point from a sample on the light sans occluders, return the extant light vector and distance.
varying vec3f SpotLight_computeRadiance(void *uniform light, const varying vec3f &coordinates, varying vec3f &direction, varying float &distance);

//!< Construct a new ispc-side SpotLight object
void SpotLight_Constructor(uniform SpotLight *uniform THIS,
                                  void *uniform cppEquivalent,
                                  const uniform vec3f &position,
                                  const uniform vec3f &direction,
                                  const uniform vec3f &color,
                                  const uniform float range,
                                  const uniform float halfAngle);

//!< Destruct an ispc-side SpotLight object
void SpotLight_Destructor(uniform SpotLight *uniform THIS);
