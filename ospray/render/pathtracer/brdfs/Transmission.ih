#pragma once

#include "BRDF.ih"
#include "optics.ih"

struct Transmission
{
  uniform BRDF base;

  /*! Transmission coefficient of the material. The range is [0,1]
   *  where 0 means total absorption and 1 means total
   *  transmission. */
  vec3f T;
};

inline vec3f Transmission__eval(const uniform BRDF* uniform _this,
                                const vec3f &wo, const DifferentialGeometry &dg, const vec3f &wi) 
{
  return make_vec3f(0.0f);
}

inline vec3f Transmission__sample(const uniform BRDF* uniform _this,
                                const vec3f &wo, 
                                const DifferentialGeometry &dg, 
                                Sample3f &wi, 
                                const vec2f &s)  
{
  const varying Transmission* uniform this = (const varying Transmission* uniform) _this;
  wi = make_Sample3f(neg(wo),1.0f);
  return this->T;
}

inline void Transmission__Constructor(varying Transmission* uniform this,
                                      const varying vec3f T)
{
  BRDF__Constructor(&this->base,SPECULAR_TRANSMISSION,
                    Transmission__eval,Transmission__sample);
  this->T = T;
}
