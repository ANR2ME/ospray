// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "optics.ih"
#include "ospray/common/DifferentialGeometry.ih"

#define SPECULAR_REFLECTION   (1<<0)  /*!< diffuse light reflection            */
#define DIFFUSE_REFLECTION    (1<<1)  /*!< glossy light reflection             */
#define GLOSSY_REFLECTION     (1<<2)  /*!< perfect specular light reflection   */
#define DIFFUSE_TRANSMISSION  (1<<3)  /*!< diffuse light transmission          */
#define GLOSSY_TRANSMISSION   (1<<4)  /*!< glossy light transmission           */
#define SPECULAR_TRANSMISSION (1<<5)  /*!< perfect specular light transmission */

/*! diffuse reflections and transmissions          */
#define DIFFUSE      (DIFFUSE_REFLECTION   | DIFFUSE_TRANSMISSION)

/*! glossy reflections and transmissions           */
#define GLOSSY       (GLOSSY_REFLECTION    | GLOSSY_TRANSMISSION)

/*! perfect specular reflections and transmissions */
#define SPECULAR     (SPECULAR_REFLECTION  | SPECULAR_TRANSMISSION)

/*! all possible reflections   */
#define REFLECTION   (DIFFUSE_REFLECTION   | GLOSSY_REFLECTION   | SPECULAR_REFLECTION)

/*! all possible transmissions */
#define TRANSMISSION (DIFFUSE_TRANSMISSION | GLOSSY_TRANSMISSION|SPECULAR_TRANSMISSION)

/*! no component set   */
#define NONE         0

/*! all components set */
#define ALL          (REFLECTION | TRANSMISSION)

struct BSDF;

typedef uint32 BSDFType;

typedef vec3f (*BSDF_EvalFunc)(const uniform BSDF* uniform this,
                               const DifferentialGeometry& dg, const vec3f& wo, const vec3f& wi, float& pdf);

typedef vec3f (*BSDF_SampleFunc)(const uniform BSDF* uniform this,
                                 const DifferentialGeometry& dg, const vec3f& wo, vec3f& wi, float& pdf, BSDFType& type, const vec2f& s, float ss);

struct BSDF
{
  BSDFType type;
  BSDF_EvalFunc eval;
  BSDF_SampleFunc sample;
};

inline void BSDF_Constructor(uniform BSDF* uniform this,
                             uniform BSDFType type,
                             uniform BSDF_EvalFunc eval,
                             uniform BSDF_SampleFunc sample)
{
  this->type = type;
  this->eval = eval;
  this->sample = sample;
}
