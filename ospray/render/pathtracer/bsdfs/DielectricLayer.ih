// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Dielectric.ih"

// Simplified Weidlich-Wilkie smooth coating BSDF.
// Refraction for all rays and Fresnel for exiting reflection rays are ignored, but absorption
// is computed from the refracted ray lengths. The advantages are that it does not suffer from
// energy loss, absorption behaves the same as in the original approach, and it's faster.
// [Weidlich and Wilkie, 2007, "Arbitrarily Layered Micro-Facet Surfaces"]
struct DielectricLayer
{
  BSDF super;

  varying BSDF* varying substrate;
  float eta;
  vec3f transmittance;
  float thickness;
  float weight;
};

inline BSDF_EvalRes DielectricLayer_eval(const varying BSDF* uniform super,
                                         const vec3f& wo, const vec3f& wi, unsigned int& lcg)
{
  const varying DielectricLayer* uniform self = (const varying DielectricLayer* uniform)super;
  BSDF_EvalRes res;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.f)
    return make_BSDF_EvalRes_zero();
  float cosThetaI = dot(wi, getN(super));

  // Fresnel term
  float cosThetaO1; // positive
  float F = fresnelDielectricWeightedEx(cosThetaO, cosThetaO1, self->eta, self->weight);

  // Evaluate the substrate
  // Ignore refraction
  BSDF_EvalRes substrate;
  foreach_unique (f in self->substrate)
    substrate = f->eval(f, wo, wi, lcg);

  // Apply the coating medium transmittance
  // Computing the path length from the original angles would result in too much absorption, so instead use the refracted angles
  float lengthO1 = rcp(cosThetaO1);
  float lengthI1 = (cosThetaI > 0.f) ? rcp(refract(cosThetaI, self->eta)) : 0.f; // rcp(cosThetaI1)
  substrate.value = lerp(self->weight, substrate.value, substrate.value * pow(self->transmittance, self->thickness * (lengthO1 + lengthI1)));

  // Compute the final substrate reflection/transmission
  // Ignore Fresnel for the exiting reflection ray
  res.pdf = (1.f-F) * substrate.pdf;
  res.value = (1.f-F) * substrate.value;
  return res;
}

inline BSDF_SampleRes DielectricLayer_sample(const varying BSDF* uniform super,
                                             const vec3f& wo, const vec2f& s, float ss, unsigned int& lcg)
{
  const varying DielectricLayer* uniform self = (const varying DielectricLayer* uniform)super;
  BSDF_SampleRes res;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.f)
    return make_BSDF_SampleRes_zero();

  // Fresnel term
  float cosThetaO1; // positive
  float F = fresnelDielectricWeightedEx(cosThetaO, cosThetaO1, self->eta, self->weight);

  if (ss < F)
  {
    // Sample the coating
    res.type = BSDF_SPECULAR_REFLECTION;
    res.wi = reflect(wo, getN(super), cosThetaO);
    res.pdf = inf;
    res.weight = make_vec3f(1.f);
  }
  else
  {
    // Sample the substrate
    // Ignore refraction
    float ss1 = (ss - F) * rcp(1.f-F); // reallocate sample
    foreach_unique (f in self->substrate)
      res = f->sample(f, wo, s, ss1, lcg);
    if (reduce_max(res.weight) <= 0.f)
      return res;
    float cosThetaI = dot(res.wi, getN(super));

    // Apply the coating medium transmittance
    float lengthO1 = rcp(cosThetaO1);
    float lengthI1 = (cosThetaI > 0.f) ? rcp(refract(cosThetaI, self->eta)) : 0.f; // rcp(cosThetaI1)
    res.weight = lerp(self->weight, res.weight, res.weight * pow(self->transmittance, self->thickness * (lengthO1 + lengthI1)));

    // Compute the final reflection/transmission
    // Ignore Fresnel for the exiting reflection ray
    res.pdf = (1.f-F) * res.pdf;
  }

  return res;
}

inline void DielectricLayer_Constructor(varying DielectricLayer* uniform self, const varying linear3f* uniform frame,
                                        varying BSDF* varying substrate, float eta, vec3f transmittance, float thickness,
                                        float weight)
{
  BSDF_Constructor(&self->super, BSDF_SPECULAR_REFLECTION | substrate->type,
                   DielectricLayer_eval, DielectricLayer_sample,
                   frame);

  self->substrate = substrate;
  self->eta = eta;
  self->transmittance = transmittance;
  self->thickness = thickness;
  self->weight = weight;
}

inline varying BSDF* uniform DielectricLayer_create(uniform ShadingContext* uniform ctx, const varying linear3f* uniform frame,
                                                    varying BSDF* varying substrate, float eta, vec3f transmittance, float thickness,
                                                    float weight)
{
  varying DielectricLayer* uniform self = (varying DielectricLayer* uniform)ShadingContext_alloc(ctx, sizeof(DielectricLayer));
  DielectricLayer_Constructor(self, frame, substrate, eta, transmittance, thickness, weight);
  return &self->super;
}

// Helper function for transparent shadow rays
inline vec3f DielectricLayer_getTransparency(float cosThetaO, float eta, vec3f transmittance, float thickness,
                                             float weight)
{
  // Apply the coating medium transmittance
  // Computing the path length from the original angles would result in too much absorption, so instead use the refracted angles
  float lengthO1 = rcp(refract(cosThetaO, eta)); // rcp(cosThetaO1)
  vec3f value = lerp(weight, make_vec3f(1.f), pow(transmittance, thickness * lengthO1));

  // Compute the final transmittance
  float T = Dielectric_transmittance(cosThetaO, eta, weight);
  value = value * T;
  return value;
}
