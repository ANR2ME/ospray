// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"

struct Lambert
{
  uniform BSDF base;
  vec3f R;
};

inline vec3f Lambert_eval(const uniform BSDF* uniform base,
                          const DifferentialGeometry& dg, const vec3f& wo, const vec3f& wi, float& pdf)
{
  const varying Lambert* uniform self = (const varying Lambert* uniform)base;
  pdf = clamp(dot(wi, dg.Ns)) * one_over_pi;
  return self->R/M_PI * clamp(dot(wi, dg.Ns));
}

inline vec3f Lambert_sample(const uniform BSDF* uniform base,
                            const DifferentialGeometry& dg, const vec3f& wo, vec3f& wi, float& pdf, BSDFType& type, const vec2f& s, float ss)
{
  const varying Lambert* uniform self = (const varying Lambert* uniform)base;
  const vec3f localDir = cosineSampleHemisphere(s);
  wi = frame(dg.Ns) * localDir;
  pdf = cosineSampleHemispherePDF(localDir);
  type = DIFFUSE_REFLECTION;
  return self->R;
}

inline void Lambert_Constructor(varying Lambert* uniform self, const vec3f& R)
{
  BSDF_Constructor(&self->base, DIFFUSE_REFLECTION,
                   Lambert_eval, Lambert_sample);
  self->R = R;
}

inline varying Lambert make_Lambert(const varying vec3f R) {
  varying Lambert v; Lambert_Constructor(&v,R); return v;
}

inline uniform Lambert make_Lambert(const uniform vec3f R) {
  uniform Lambert v; /*Lambert_Constructor(&v,R);*/ return v;
}
