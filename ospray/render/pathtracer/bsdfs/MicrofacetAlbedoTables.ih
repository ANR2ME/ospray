// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use self file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#define MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE 16

extern uniform float* uniform MicrofacetDielectricAlbedoTable_values;
extern uniform float* uniform MicrofacetDielectricAlbedoTable_avgValues;

void MicrofacetDielectricAlbedoTable_precompute();

inline float interpLinear3D(vec3f p, const uniform float* uniform f, uniform vec3i size)
{
  const float xc = clamp(p.x, 0.f, (float)(size.x-1));
  const float yc = clamp(p.y, 0.f, (float)(size.y-1));
  const float zc = clamp(p.z, 0.f, (float)(size.z-1));

  const float sx = xc - floor(xc);
  const float sy = yc - floor(yc);
  const float sz = zc - floor(zc);

  const int x0 = min((int)xc, size.x-1);
  const int x1 = min(x0+1,    size.x-1);

  const int y0 = min((int)yc, size.y-1);
  const int y1 = min(y0+1,    size.y-1);

  const int z0 = min((int)zc, size.z-1);
  const int z1 = min(z0+1,    size.z-1);

  const int ny = size.x;
  const int nz = size.x * size.y;

  const float f00 = lerp(sx, f[x0+y0*ny+z0*nz], f[x1+y0*ny+z0*nz]);
  const float f01 = lerp(sx, f[x0+y1*ny+z0*nz], f[x1+y1*ny+z0*nz]);

  const float f10 = lerp(sx, f[x0+y0*ny+z1*nz], f[x1+y0*ny+z1*nz]);
  const float f11 = lerp(sx, f[x0+y1*ny+z1*nz], f[x1+y1*ny+z1*nz]);

  const float f0 = lerp(sy, f00, f01);
  const float f1 = lerp(sy, f10, f11);

  return lerp(sz, f0, f1);
}

inline float MicrofacetDielectricAlbedoTable_eval(float cosThetaO, float eta, float roughness)
{
  const uniform int size = MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE;
  const vec3f p = make_vec3f(cosThetaO, eta, roughness) * (size-1);
  return interpLinear3D(p, MicrofacetDielectricAlbedoTable_values, make_vec3i(size));
}