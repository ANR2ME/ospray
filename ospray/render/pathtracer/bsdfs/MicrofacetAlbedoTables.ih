// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use self file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/interpolation.ih"

#define MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE 16

extern uniform float* uniform MicrofacetDielectricReflectionAlbedoTable_directional; // 3D table (cosThetaO, eta, roughness)
extern uniform float* uniform MicrofacetDielectricReflectionAlbedoTable_average;     // 2D table (eta, roughness)

void precomputeMicrofacetAlbedoTables();

inline float MicrofacetDielectricReflectionAlbedoTable_eval(float cosThetaO, float eta, float roughness)
{
  const uniform int size = MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE;
  const vec3f p = make_vec3f(cosThetaO, eta, roughness) * (size-1);
  return interp3DLinear(p, MicrofacetDielectricReflectionAlbedoTable_directional, make_vec3i(size));
}

inline float MicrofacetDielectricReflectionAlbedoTable_evalAverage(float eta, float roughness)
{
  const uniform int size = MICROFACET_DIELECTRIC_ALBEDO_TABLE_SIZE;
  const vec2f p = make_vec2f(eta, roughness) * (size-1);
  return interp2DLinear(p, MicrofacetDielectricReflectionAlbedoTable_average, make_vec2i(size));
}