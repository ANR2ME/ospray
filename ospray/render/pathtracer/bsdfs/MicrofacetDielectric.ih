// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"
#include "Fresnel.ih"
#include "GGXDistribution.ih"
#include "MicrofacetAlbedoTables.ih"

// Microfacet dielectric BSDF with the Smith microsurface model and approximate multiple scattering.
// [Walter et al., 2007, "Microfacet Models for Refraction through Rough Surfaces"]
// [Kulla and Conty, 2017, "Revisiting Physically Based Shading at Imageworks"]
// [Jakob et al., 2014, "A Comprehensive Framework for Rendering Layered Materials", Extended Technical Report]
// FIXME: improve robustness
struct MicrofacetDielectric
{
  BSDF super;

  float eta;
  GGXDistribution microfacet;
  float roughness;
  float EavgEta, EavgRcpEta;
  float FavgEta, FavgRcpEta;
  float fmsRatio;
  float reflectionWeight;
};

inline BSDF_EvalRes MicrofacetDielectric_eval(const varying BSDF* uniform super,
                                              const vec3f& wo, const vec3f& wi, unsigned int& lcg)
{
  const varying MicrofacetDielectric* uniform self = (const varying MicrofacetDielectric* uniform)super;
  BSDF_EvalRes res;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.f)
    return make_BSDF_EvalRes_zero();
  float cosThetaI = dot(wi, getN(super));
  bool isReflection = cosThetaI > 0.f;

  // Compute the microfacet normal
  vec3f wh;

  if (isReflection)
  {
    // Reflection
    wh = wo + wi;
  }
  else
  {
    // Transmission
    wh = self->eta*wo + wi;
  }

  wh = normalize(wh);
  float cosThetaH = dot(wh, getN(super));
  if (cosThetaH < 0.f)
  {
    wh = neg(wh);
    cosThetaH = -cosThetaH;
  }

  float cosThetaOH = dot(wo, wh);
  float cosThetaIH = dot(wi, wh);

  // Fresnel term
  float cosThetaTH; // positive
  float F = fresnelDielectricEx(cosThetaOH, cosThetaTH, self->eta) * self->reflectionWeight;

  // Energy compensation [Kulla and Conty, 2017]
  float Eo = MicrofacetDielectricAlbedoTable_eval(cosThetaO, self->eta, self->roughness) * self->reflectionWeight;
  float fms, fmsPdf;

  float ratio = self->fmsRatio * (1.f - self->FavgEta);

  float value;
  if (isReflection)
  {
    // Reflection
    float Ei = MicrofacetDielectricAlbedoTable_eval(cosThetaI, self->eta, self->roughness) * self->reflectionWeight;
    fms = ratio * (1.f - Eo) * (1.f - Ei) * rcp(pi * (1.f - self->EavgEta)) * cosThetaI;
    fmsPdf = ratio * cosineSampleHemispherePDF(cosThetaI);

    res.pdf = F * rcp(4.f*abs(cosThetaOH));
    value = F * rcp(4.f*cosThetaO);
  }
  else
  {
    // Transmission
    // cosThetaTH = -cosThetaIH
    float Ei = MicrofacetDielectricAlbedoTable_eval(abs(cosThetaI), rcp(self->eta), self->roughness) * self->reflectionWeight;
    fms = (1.f - ratio) * (1.f - Eo) * (1.f - Ei) * rcp(pi * (1.f - self->EavgRcpEta)) * abs(cosThetaI) * sqr(self->eta);
    fmsPdf = (1.f - ratio) * cosineSampleHemispherePDF(abs(cosThetaI));

    res.pdf = (1.f-F) * cosThetaTH * rcp(sqr(self->eta*cosThetaOH - cosThetaTH));
    value = (1.f-F) * cosThetaTH * abs(cosThetaOH) * rcp(cosThetaO*sqr(self->eta*cosThetaOH - cosThetaTH)) * sqr(self->eta);
  }

  linear3f toLocal = transposed(getFrame(super));
  vec3f wo0 = toLocal * wo;
  vec3f wi0 = toLocal * wi;
  vec3f wh0 = toLocal * wh;

  float whPdf;
  float D = evalVisible(self->microfacet, wh0, wo0, cosThetaOH, whPdf);
  float G = evalG2(self->microfacet, wo0, wi0, cosThetaOH, cosThetaIH);

  res.pdf *= whPdf;
  res.pdf = Eo * res.pdf + (1.f - Eo) * fmsPdf;
  res.value = make_vec3f(value * D * G + fms);
  return res;
}

inline BSDF_SampleRes MicrofacetDielectric_sample(const varying BSDF* uniform super,
                                                  const vec3f& wo, const vec2f& s, float ss, unsigned int& lcg)
{
  const varying MicrofacetDielectric* uniform self = (const varying MicrofacetDielectric* uniform)super;
  BSDF_SampleRes res;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.f)
    return make_BSDF_SampleRes_zero();

  // Energy compensation [Kulla and Conty, 2017]
  float Eo = MicrofacetDielectricAlbedoTable_eval(cosThetaO, self->eta, self->roughness) * self->reflectionWeight;
  float fms;

  if (ss <= Eo)
  //if (0)
  {
    linear3f toGlobal = getFrame(super);
    linear3f toLocal = transposed(getFrame(super));
    vec3f wo0 = toLocal * wo;

    // Sample the microfacet normal
    float whPdf;
    vec3f wh = toGlobal * sampleVisible(self->microfacet, wo0, whPdf, s);

    float cosThetaOH = dot(wo, wh);

    // Fresnel term
    float cosThetaTH; // positive
    float F = fresnelDielectricEx(cosThetaOH, cosThetaTH, self->eta) * self->reflectionWeight;

    // Sample the reflection or the transmission
    float cosThetaI;
    float weight;

    bool doReflection = (LCG_getFloat(lcg) <= F);
    if (doReflection)
    {
      // Reflection
      res.type = BSDF_GLOSSY_REFLECTION;
      res.wi = reflect(wo, wh, cosThetaOH);
    }
    else
    {
      // Transmission
      // cosThetaTH = -cosThetaIH
      res.type = BSDF_GLOSSY_TRANSMISSION;
      res.wi = refract(wo, wh, cosThetaOH, cosThetaTH, self->eta);
    }
  }
  else
  {
    float ratio = self->fmsRatio * (1.f - self->FavgEta);

    bool doReflection = (LCG_getFloat(lcg) <= ratio);
    if (doReflection)
    {
      // Reflection
      res.type = BSDF_DIFFUSE_REFLECTION;
      res.wi = getFrame(super) * cosineSampleHemisphere(s);
    }
    else
    {
      // Transmission
      res.type = BSDF_DIFFUSE_TRANSMISSION;
      res.wi = neg(getFrame(super) * cosineSampleHemisphere(s));
    }
  }

  BSDF_EvalRes eval = MicrofacetDielectric_eval(super, wo, res.wi, lcg);
  res.weight = eval.value * rcp(eval.pdf);
  res.pdf = eval.pdf;
  return res;
}

inline void MicrofacetDielectric_Constructor(varying MicrofacetDielectric* uniform self,
                                             const varying linear3f* uniform frame,
                                             float eta, float roughness, float anisotropy,
                                             float reflectionWeight)
{
  BSDF_Constructor(&self->super, BSDF_GLOSSY,
                   MicrofacetDielectric_eval, MicrofacetDielectric_sample,
                   frame);

  self->eta = eta;
  self->microfacet = make_GGXDistribution(roughnessToAlpha(roughness, anisotropy));

  // Energy compensation [Kulla and Conty, 2017]
  self->roughness = roughness;
  self->EavgEta = MicrofacetDielectricAlbedoTable_evalAvg(eta, roughness) * reflectionWeight;
  self->EavgRcpEta = MicrofacetDielectricAlbedoTable_evalAvg(rcp(eta), roughness) * reflectionWeight;
  self->FavgEta = fresnelDielectricAvg(eta) * reflectionWeight;
  self->FavgRcpEta = fresnelDielectricAvg(rcp(eta)) * reflectionWeight;
  float a = (1.f - self->FavgEta) * rcp(1.f - self->EavgRcpEta);
  float b = (1.f - self->FavgRcpEta) * rcp(1.f - self->EavgEta) * rcp(sqr(eta));
  self->fmsRatio = b * rcp(a + b);

  self->reflectionWeight = reflectionWeight;
}

inline varying BSDF* uniform MicrofacetDielectric_create(uniform ShadingContext* uniform ctx,
                                                         const varying linear3f* uniform frame,
                                                         float eta, float roughness, float anisotropy,
                                                         float reflectionWeight)
{
  varying MicrofacetDielectric* uniform self =
    (varying MicrofacetDielectric* uniform)ShadingContext_alloc(ctx, sizeof(MicrofacetDielectric));
  MicrofacetDielectric_Constructor(self, frame, eta, roughness, anisotropy, reflectionWeight);
  return &self->super;
}

// Helper function for transparent shadow rays
inline vec3f MicrofacetDielectric_getTransparency(float cosThetaO, float eta, float roughness, float anisotropy,
                                                  float reflectionWeight, unsigned int& lcg)
{
  //float T = 1.f - MicrofacetDielectricReflectionAlbedoTable_eval(cosThetaO, eta, roughness) * reflectionWeight;
  //return make_vec3f(T);
  return make_vec3f(0.f);
}
