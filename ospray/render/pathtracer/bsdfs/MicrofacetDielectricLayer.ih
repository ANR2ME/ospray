// ======================================================================== //
// Copyright 2009-2018 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "BSDF.ih"
#include "Fresnel.ih"
#include "GGXDistribution.ih"

// Simplified Weidlich-Wilkie microfacet coating BSDF with the Smith microsurface model.
// Refraction for all rays and Fresnel for exiting reflection rays are ignored, but absorption
// is computed from the refracted ray lengths. The advantages are that it does not suffer from
// energy loss, absorption behaves the same as in the original approach, and it's faster.
// [Weidlich and Wilkie, 2007, "Arbitrarily Layered Micro-Facet Surfaces"]
// [Walter et al., 2007, "Microfacet Models for Refraction through Rough Surfaces"]
struct MicrofacetDielectricLayer
{
  BSDF super;

  varying BSDF* varying substrate;
  float eta;
  vec3f transmittance;
  float thickness;
  GGXDistribution microfacet;
  float reflectionWeight;
};

// Computes the transmittance through the rough coating surface, which requires sampling a microfacet normal
inline float MicrofacetDielectricLayer_microfacetTransmittance(const varying BSDF* uniform super,
                                                               const vec3f& wo, float cosThetaO, unsigned int& lcg)
{
  const varying MicrofacetDielectricLayer* uniform self = (const varying MicrofacetDielectricLayer* uniform)super;

  // Sample the microfacet normal
  float whPdf;
  vec3f wh = getFrame(super) * sampleVisibleUH(self->microfacet, transposed(getFrame(super)) * wo, whPdf, LCG_getFloat2(lcg));

  float cosThetaOH = dot(wo, wh);

  // Fresnel term
  float cosThetaTH; // positive
  float F = fresnelDielectricWeightedEx(cosThetaOH, cosThetaTH, self->eta, self->reflectionWeight);

  // Sample the transmission
  // cosThetaTH = -cosThetaIH
  vec3f wi = refract(wo, wh, cosThetaOH, cosThetaTH, self->eta);
  float cosThetaI = dot(wi, getN(super));
  if (cosThetaI >= 0.f)
    return 0.f;

  float cosThetaIH = dot(wi, wh);
  float G = evalG2(self->microfacet, cosThetaO, cosThetaI, cosThetaOH, cosThetaIH);

  return (1.f-F) * (G * rcp_safe(evalG1(self->microfacet, cosThetaO, cosThetaOH)));
}

inline BSDF_EvalRes MicrofacetDielectricLayer_eval(const varying BSDF* uniform super,
                                                   const vec3f& wo, const vec3f& wi, unsigned int& lcg)
{
  const varying MicrofacetDielectricLayer* uniform self = (const varying MicrofacetDielectricLayer* uniform)super;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.f)
    return make_BSDF_EvalRes_zero();
  float cosThetaI = dot(wi, getN(super));

  // Evaluate the substrate
  // Ignore refraction
  BSDF_EvalRes substrate;
  foreach_unique (f in self->substrate)
    substrate = f->eval(f, wo, wi, lcg);

  // Apply the coating medium transmittance
  // Computing the path length from the original angles would result in too much absorption, so instead use the refracted angles
  float lengthO1 = rcp(refract(cosThetaO, self->eta)); // rcp(cosThetaO1)
  float lengthI1 = (cosThetaI > 0.f) ? rcp(refract(cosThetaI, self->eta)) : 0.f; // rcp(cosThetaI1)
  substrate.value = substrate.value * pow(self->transmittance, self->thickness * (lengthO1 + lengthI1));

  // Compute the final substrate reflection/transmission
  // Ignore Fresnel for the exiting reflection ray
  float T = MicrofacetDielectricLayer_microfacetTransmittance(super, wo, cosThetaO, lcg);
  substrate.value = substrate.value * T;

  float coatingPickProb = fresnelDielectricWeighted(cosThetaO, self->eta, self->reflectionWeight); // have to use the macronormal for sampling
  float substratePickProb = 1.f - coatingPickProb;

  if (cosThetaI > 0.f)
  {
    // Compute the microfacet normal
    vec3f wh = normalize(wi + wo);
    float cosThetaOH = dot(wo, wh);

    // Fresnel term
    float F = fresnelDielectricWeighted(cosThetaOH, self->eta, self->reflectionWeight);

    // Evaluate the coating reflection
    float cosThetaH = dot(wh, getN(super));
    float cosThetaIH = dot(wi, wh);

    float whPdf;
    float D = evalVisible(self->microfacet, cosThetaH, cosThetaO, cosThetaOH, whPdf);
    float G = evalG2(self->microfacet, cosThetaO, cosThetaI, cosThetaOH, cosThetaIH);

    BSDF_EvalRes coating;
    coating.pdf = whPdf * rcp(4.f*cosThetaOH);
    coating.value = make_vec3f(F * D * G * rcp(4.f*cosThetaO));

    // Compute the total reflection
    BSDF_EvalRes res;
    res.pdf = coatingPickProb * coating.pdf + substratePickProb * substrate.pdf;
    res.value = coating.value + substrate.value;
    return res;
  }
  else
  {
    // Return the substrate transmission
    substrate.pdf *= substratePickProb;
    return substrate;
  }
}

inline BSDF_SampleRes MicrofacetDielectricLayer_sample(const varying BSDF* uniform super,
                                                       const vec3f& wo, const vec2f& s, float ss, unsigned int& lcg)
{
  const varying MicrofacetDielectricLayer* uniform self = (const varying MicrofacetDielectricLayer* uniform)super;
  BSDF_SampleRes res;

  float cosThetaO = dot(wo, getN(super));
  if (cosThetaO <= 0.f)
    return make_BSDF_SampleRes_zero();

  // Sample the coating or the substrate
  vec3f wh;
  BSDF_EvalRes substrate;

  float coatingPickProb = fresnelDielectricWeighted(cosThetaO, self->eta, self->reflectionWeight); // only the macronormal is available yet
  float substratePickProb = 1.f - coatingPickProb;

  if (ss < coatingPickProb)
  {
    // Sample the microfacet normal
    float whPdf;
    wh = getFrame(super) * sampleVisibleUH(self->microfacet, transposed(getFrame(super)) * wo, whPdf, s);
    float cosThetaOH = dot(wo, wh);

    res.type = BSDF_GLOSSY_REFLECTION;
    res.wi = reflect(wo, wh, cosThetaOH);

    // Evaluate the substrate
    // Ignore refraction
    foreach_unique (f in self->substrate)
      substrate = f->eval(f, wo, res.wi, lcg);
  }
  else
  {
    // Sample the substrate
    // Ignore refraction
    float ss1 = (ss - coatingPickProb) * rcp(substratePickProb); // reallocate sample
    foreach_unique (f in self->substrate)
      res = f->sample(f, wo, s, ss1, lcg);
    if (reduce_max(res.weight) <= 0.f)
      return res;
    substrate.pdf = res.pdf;
    substrate.value = res.weight * ((res.type & BSDF_SPECULAR) ? 1.f : res.pdf); // correctly handle delta distributions

    // Compute the microfacet normal
    wh = normalize(res.wi + wo);
  }

  float cosThetaI = dot(res.wi, getN(super));
  float cosThetaOH = dot(wo, wh);

  // Apply the coating medium transmittance
  // Computing the path length from the original angles would result in too much absorption, so instead use the refracted angles
  float lengthO1 = rcp(refract(cosThetaO, self->eta)); // rcp(cosThetaO1)
  float lengthI1 = (cosThetaI > 0.f) ? rcp(refract(cosThetaI, self->eta)) : 0.f; // rcp(cosThetaI1)
  substrate.value = substrate.value * pow(self->transmittance, self->thickness * (lengthO1 + lengthI1));

  // Compute the final substrate reflection/transmission
  // Ignore Fresnel for the exiting reflection ray
  float T = MicrofacetDielectricLayer_microfacetTransmittance(super, wo, cosThetaO, lcg);
  substrate.value = substrate.value * T;

  if (res.type & BSDF_SPECULAR)
  {
    // If we sampled a delta distribution, we don't have to evaluate the coating reflection (see MultiBSDF_sample)
    res.weight = substrate.value * rcp(substratePickProb);
    return res;
  }
  else if (cosThetaI <= 0.f)
  {
    // If we sampled transmission, we just have to return the substrate transmission
    res.pdf = substratePickProb * substrate.pdf;
    res.weight = substrate.value * rcp(res.pdf);
    return res;
  }
  else
  {
    // Fresnel term
    float F = fresnelDielectricWeighted(cosThetaOH, self->eta, self->reflectionWeight);

    // Evaluate the coating reflection
    float cosThetaH = dot(wh, getN(super));
    float cosThetaIH = dot(res.wi, wh);

    float whPdf;
    float D = evalVisible(self->microfacet, cosThetaH, cosThetaO, cosThetaOH, whPdf);
    float G = evalG2(self->microfacet, cosThetaO, cosThetaI, cosThetaOH, cosThetaIH);

    BSDF_EvalRes coating;
    coating.pdf = whPdf * rcp(4.f*cosThetaOH);
    coating.value = make_vec3f(F * D * G * rcp(4.f*cosThetaO));

    // Compute the total reflection
    res.pdf = coatingPickProb * coating.pdf + substratePickProb * substrate.pdf;
    res.weight = (coating.value + substrate.value) * rcp(res.pdf);
    return res;
  }
}

inline void MicrofacetDielectricLayer_Constructor(varying MicrofacetDielectricLayer* uniform self, const varying linear3f* uniform frame,
                                                  varying BSDF* varying substrate, float eta, vec3f transmittance, float thickness, float roughness,
                                                  float reflectionWeight)
{
  BSDF_Constructor(&self->super, BSDF_GLOSSY_REFLECTION | substrate->type,
                   MicrofacetDielectricLayer_eval, MicrofacetDielectricLayer_sample,
                   frame);

  self->substrate = substrate;
  self->eta = eta;
  self->transmittance = transmittance;
  self->thickness = thickness;
  self->microfacet = make_GGXDistribution(roughnessToAlpha(roughness));
  self->reflectionWeight = reflectionWeight;
}

inline varying BSDF* uniform MicrofacetDielectricLayer_create(uniform ShadingContext* uniform ctx, const varying linear3f* uniform frame,
                                                              varying BSDF* varying substrate, float eta, vec3f transmittance, float thickness, float roughness,
                                                              float reflectionWeight)
{
  varying MicrofacetDielectricLayer* uniform self = (varying MicrofacetDielectricLayer* uniform)ShadingContext_alloc(ctx, sizeof(MicrofacetDielectricLayer));
  MicrofacetDielectricLayer_Constructor(self, frame, substrate, eta, transmittance, thickness, roughness, reflectionWeight);
  return &self->super;
}
