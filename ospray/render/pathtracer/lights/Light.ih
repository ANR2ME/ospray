#pragma once

#include "samplers/Sample.ih"
#include "ospray/common/DifferentialGeometry.ih"

struct Shape;

#define TY_LIGHT 0
#define TY_AREA_LIGHT 1
#define TY_ENV_LIGHT 4
#define TY_PRECOMPUTE_LIGHT_SAMPLES 8

enum LightType {
  NORMAL_LIGHT = 0, AREA_LIGHT = 1, ENV_LIGHT = 4, PRECOMPUTED_LIGHT = 8
};

/*! A precomputed sample on light source. */
struct LightSample 
{
  Sample3f wi;    //!< The direction towards the light source.
  float    tMax;  //!< The largest valid parameter value for a shadow ray.
  vec3f    L;     //!< The importance weighted radiance for this sample.
};

struct Light;
struct AreaLight;
struct EnvironmentLight;

typedef Light* uniform (*LightTransformFunc)(const uniform Light *uniform this, 
                                             const uniform AffineSpace3f& xfm);

typedef Shape* uniform (*ShapeFunc)(const uniform Light *uniform this);

typedef varying vec3f (*EnvironmentLeFunc)(const uniform EnvironmentLight *uniform _THIS,
                                           varying const vec3f &wo);

typedef varying vec3f (*AreaLeFunc)(const uniform AreaLight *uniform _THIS,
                                    varying const DifferentialGeometry &dg, 
                                    varying const vec3f &wo);

typedef varying vec3f (*EvalFunc)(const uniform Light *uniform _THIS,
                                  varying const DifferentialGeometry &dg, 
                                  varying const vec3f &wi);

typedef varying vec3f (*SampleFunc)(const uniform Light *uniform _THIS,
                                    varying const DifferentialGeometry &dg, 
                                    varying Sample3f &wi,
                                    varying float &tMax,
                                    varying const vec2f &s);

/*! Abstract base class of all embree light sources */
struct Light
{
  // RefCount base;

  LightType type;
  LightTransformFunc transform;
  ShapeFunc shape;
  EvalFunc eval;
  SampleFunc sample;
};

// void Light__Destructor(uniform RefCount* uniform this);

void Light__Constructor(uniform Light* uniform this,
                        // uniform DestructorFunc destructor,
                        uniform LightType type,
                        uniform LightTransformFunc transform,
                        uniform ShapeFunc shape,
                        uniform EvalFunc eval_,
                        uniform SampleFunc sample_);

struct AreaLight {
  Light base;
  AreaLeFunc Le;
};

void AreaLight__Constructor(uniform AreaLight* uniform this,
                            // uniform DestructorFunc destructor,
                            uniform LightType type,
                            uniform LightTransformFunc transform,
                            uniform ShapeFunc shape,
                            uniform EvalFunc eval_,
                            uniform SampleFunc sample_,
                            uniform AreaLeFunc Le);

struct EnvironmentLight {
  Light base;
  EnvironmentLeFunc Le;
};

void EnvironmentLight__Constructor(uniform EnvironmentLight* uniform this,
                                   // uniform DestructorFunc destructor,
                                   uniform LightType type,
                                   uniform LightTransformFunc transform,
                                   uniform ShapeFunc shape,
                                   uniform EvalFunc eval_,
                                   uniform SampleFunc sample_,
                                   uniform EnvironmentLeFunc Le);

