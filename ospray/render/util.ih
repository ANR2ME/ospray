/********************************************************************* *\
 * INTEL CORPORATION PROPRIETARY INFORMATION                            
 * This software is supplied under the terms of a license agreement or  
 * nondisclosure agreement with Intel Corporation and may not be copied 
 * or disclosed except in accordance with the terms of that agreement.  
 * Copyright (C) 2014 Intel Corporation. All Rights Reserved.           
 ********************************************************************* */

#pragma once

#include "ospray/common/ospcommon.ih"
#include "ospray/math/vec.ih"

/*! \file ospray/render/util.ih \brief Utility-functions for shaders */


/*! number of precomputed halton values, must be a power of 2 */
#define NUM_PRECOMPUTED_HALTON_VALUES 256

/*! precomputed base-2, base-3, and base-5 halton sequence values, for
    NUM_PRECOMPUTED_HALTON_VALUES values */
extern uniform float precomputedHalton[3][NUM_PRECOMPUTED_HALTON_VALUES];
extern uniform bool precomputedHalton_initialized;
extern void precomputedHalton_create();

inline float precomputedHalton2(uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[0][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}

inline float precomputedHalton3(uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[1][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}

inline float precomputedHalton5(uint32 sampleID) 
{ 
  if (!precomputedHalton_initialized) precomputedHalton_create(); 
  return precomputedHalton[2][sampleID & (NUM_PRECOMPUTED_HALTON_VALUES-1)]; 
}



inline vec3f make_random_color(const int i)
{
  const int mx = 13*17*43;
  const int my = 11*29;
  const int mz = 7*23*63;
  const uint32 g = (i * (3*5*127)+12312314);
  return make_vec3f((g % mx)*(1.f/(mx-1)),
                    (g % my)*(1.f/(my-1)),
                    (g % mz)*(1.f/(mz-1)));
}

inline uint32 cvt_uint32(const float f)
{
  return (uint32)(255.9f * max(min(f,1.f),0.f));
}

inline uint32 cvt_uint32(const vec4f &v)
{
  return 
    (cvt_uint32(v.x) << 0)  |
    (cvt_uint32(v.y) << 8)  |
    (cvt_uint32(v.z) << 16) |
    (cvt_uint32(v.w) << 24);
}

inline uint32 cvt_uint32(const vec3f &v)
{
  return 
    (cvt_uint32(v.x) << 0)  |
    (cvt_uint32(v.y) << 8)  |
    (cvt_uint32(v.z) << 16);
}

