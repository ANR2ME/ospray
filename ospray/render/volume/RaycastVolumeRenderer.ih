//
//                 INTEL CORPORATION PROPRIETARY INFORMATION
//
//    This software is supplied under the terms of a license agreement or
//    nondisclosure agreement with Intel Corporation and may not be copied
//    or disclosed except in accordance with the terms of that agreement.
//    Copyright (C) 2014 Intel Corporation. All Rights Reserved.
//

#ifndef RAYCAST_VOLUME_RENDERER_IH
#define RAYCAST_VOLUME_RENDERER_IH

#include "ospray/camera/camera.ih"
#include "ospray/common/Model.ih"
#include "ospray/common/Ray.ih"
#include "ospray/lights/light.ih"
#include "ospray/math/bbox.ih"
#include "ospray/render/renderer.ih"

    //! \brief ISPC variables and functions for the RaycastVolumeRenderer
    //!  class, a concrete subtype of the Renderer class for rendering
    //!  volumes with embedded surfaces via ray casting.
    //!
    struct RaycastVolumeRenderer {

        //! Variables and functions common to all Renderer subtypes (must be the first field of the struct).
        Renderer inherited;

        //! Renderer state.
        Camera *uniform camera;  Light **uniform lights;  Model *uniform model;

    };

    void RaycastVolumeRenderer_renderFramePostamble(Renderer *uniform renderer, const uniform int32 accumID)
        { if (renderer->fb) renderer->fb->accumID = accumID;  renderer->fb = NULL; }

    void RaycastVolumeRenderer_renderFramePreamble(Renderer *uniform renderer, FrameBuffer *uniform framebuffer)
        { renderer->fb = framebuffer; }

    //! Declaration emitted during build in "ClassName_ispc.h".  Initialize a renderer object.
//  extern "C" { void *uniform RaycastVolumeRenderer_createInstance(); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the camera.
//  extern "C" { void RaycastVolumeRenderer_setCamera(void *uniform renderer, void *uniform camera); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the light sources.
//  extern "C" { void RaycastVolumeRenderer_setLights(void *uniform renderer, void **uniform lights); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the model.
//  extern "C" { void RaycastVolumeRenderer_setModel(void *uniform renderer, void *uniform model); }

#endif // RAYCAST_VOLUME_RENDERER_IH

