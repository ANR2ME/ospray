//
//                 INTEL CORPORATION PROPRIETARY INFORMATION
//
//    This software is supplied under the terms of a license agreement or
//    nondisclosure agreement with Intel Corporation and may not be copied
//    or disclosed except in accordance with the terms of that agreement.
//    Copyright (C) 2014 Intel Corporation. All Rights Reserved.
//

#ifndef BLOCK_BRICKED_VOLUME_IH
#define BLOCK_BRICKED_VOLUME_IH

#include "ospray/common/OspDataType.h"
#include "ospray/volume/GridAccelerator.ih"
#include "ospray/volume/Volume.ih"

    //! \brief ISPC variables and functions for the BlockBrickedVolume class,
    //!  a concrete implementation of the StructuredVolume class with 64-bit
    //!  addressing in which the voxel data is laid out in memory in multiple
    //!  pages each in brick order.
    //!
    struct BlockBrickedVolume {

        //! Fields common to all Volume subtypes (must be the first entry of this struct).
        Volume inherited;

        //! Spatial acceleration structure used for space skipping.
        GridAccelerator *uniform accelerator;

        //! Volume size in blocks per dimension with padding to the nearest block.
        uniform vec3i blockCount;

        //! Volume size in voxels per dimension.
        uniform vec3i volumeDimensions;

        //! Voxel data.
        void **uniform voxelData;

        //! Voxel size in bytes.
        uniform size_t voxelSize;

        //! Voxel type.
        uniform OSPDataType voxelType;

        //! Voxel data accessor.
        varying float (*uniform getVoxel)(void *uniform pointer, const varying vec3i &index);

        //! Voxel data setter.
        void (*uniform setVoxel)(void *uniform pointer, const void *uniform source, const uniform vec3i &index, const varying vec3i &offset);

    };

    //! Declaration emitted during build in "ClassName_ispc.h".  Allocate memory for voxel data.
//  extern "C" { void BlockBrickedVolume_allocateMemory(void *uniform volume); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Assign type-specific function pointers.
//  extern "C" { void *uniform BlockBrickedVolume_createInstance(const uniform int voxelType); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the gamma correction coefficient and exponent.
//  extern "C" { void BlockBrickedVolume_setGammaCorrection(void *uniform volume, const uniform vec2f &value); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Copy voxel data into the volume.
//  extern "C" { void BlockBrickedVolume_setRegion(void *uniform volume, const void *uniform source, const uniform vec3i &index, const uniform vec3i &count); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the step size for ray casting based renderers.
//  extern "C" { void BlockBrickedVolume_setStepSize(void *uniform volume, const uniform float value); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the color and opacity transfer function.
//  extern "C" { void BlockBrickedVolume_setTransferFunction(void *uniform volume, void *uniform value); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the volume value range.
//  extern "C" { void BlockBrickedVolume_setValueRange(void *uniform volume, const uniform vec2f &value); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Set the volume size in voxels per dimension.
//  extern "C" { void BlockBrickedVolume_setVolumeDimensions(void *uniform volume, const uniform vec3i &value); }

#endif // BLOCK_BRICKED_VOLUME_IH

