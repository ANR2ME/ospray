//
//                 INTEL CORPORATION PROPRIETARY INFORMATION
//
//    This software is supplied under the terms of a license agreement or
//    nondisclosure agreement with Intel Corporation and may not be copied
//    or disclosed except in accordance with the terms of that agreement.
//    Copyright (C) 2014 Intel Corporation. All Rights Reserved.
//

#ifndef BRICKED_VOLUME_UCHAR_IH
#define BRICKED_VOLUME_UCHAR_IH

#include "ospray/volume/Volume.ih"

    //! \brief ISPC variables and functions for the BrickedVolume class, a
    //!  concrete implementation of the StructuredVolume class with 32-bit
    //!  addressing in which the voxel data is laid out in memory in brick
    //!  order.
    //!
    struct BrickedVolumeUChar {

        //! Pointers to functions common to all Volume subtypes (must be the first field of the struct).
        Volume inherited;

        //! Volume size in bricks per dimension with padding to the nearest brick.
        uniform vec3i brickCount;

        //! Volume size in voxels per dimension.
        uniform vec3i dimensions;

        //! Voxel data.
        uint8 *uniform voxelData;

    };

    //! The gradient at the given sample location in the volume.
    varying vec3f BrickedVolumeUChar_computeGradient(void *uniform volume, const varying vec3f &coordinates);

    //! Tri-linear interpolation at the given sample location in the volume.
    varying float BrickedVolumeUChar_computeSample(void *uniform volume, const varying vec3f &coordinates);

    //! Compute the 1D address of a voxel in the volume from a 3D index.
    varying int BrickedVolumeUChar_getVoxelAddress(BrickedVolumeUChar *uniform volume, const varying vec3i &index);

    //! Voxel data accessor.
    varying uint8 BrickedVolumeUChar_getVoxel(BrickedVolumeUChar *uniform volume, const varying vec3i &index);

    //! Voxel data setter.
    void BrickedVolumeUChar_setVoxel(BrickedVolumeUChar *uniform volume, const uint8 *uniform source, const uniform vec3i &index, const varying vec3i &offset);

    //! Declaration emitted during build in "ClassName_ispc.h".  Allocate storage for voxel data and assign type-specific function pointers.
//  extern "C" { void *uniform BrickedVolumeUChar_createInstance(const uniform vec3i &dimensions, const void *uniform function); }

    //! Declaration emitted during build in "ClassName_ispc.h".  Copy voxel data into the volume.
//  extern "C" { void BrickedVolumeUChar_setRegion(void *uniform volume, const uint8 *uniform source, const uniform vec3i &index, const uniform vec3i &count); }

#endif // BRICKED_VOLUME_UCHAR_IH

