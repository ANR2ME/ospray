//
//                 INTEL CORPORATION PROPRIETARY INFORMATION
//
//    This software is supplied under the terms of a license agreement or
//    nondisclosure agreement with Intel Corporation and may not be copied
//    or disclosed except in accordance with the terms of that agreement.
//    Copyright (C) 2014 Intel Corporation. All Rights Reserved.
//

#ifndef GRID_ACCELERATOR_IH
#define GRID_ACCELERATOR_IH

#include "ospray/common/OspCommon.ih"
#include "ospray/common/Ray.ih"
#include "ospray/transferfunction/TransferFunction.ih"

    //! \brief A spatial acceleration structure over a structured volume.
    //!
    //!  The structure is used for space skipping and encodes the value range
    //!  of each subvolume within a bit vector.  To determine if a subvolume
    //!  is non-empty (i.e. contains at least 1 visible voxel) the bit vector
    //!  is tested against a bit vector encoding the transfer function alpha
    //!  values.
    //!
    struct GridAccelerator {

        //! Grid size in bricks per dimension with padding to the nearest brick.
        uniform vec3i brickCount;

        //! The volumetric values within a grid cell encoded as a bit vector.
        uint32 *uniform cellCodes;

        //! The range of volumetric values within a grid cell.
        vec2f *uniform cellRange;

        //! Grid size in cells per dimension.
        uniform vec3i gridDimensions;

        //! The largest floating point number less than the value range bucket count.
        uniform float rangeScale;

        //! The transfer function opacity values are encoded as a bit vector.
        uniform uint32 transferFunctionCode;

        //! The volumetric value range.
        uniform vec2f valueRange;

        //! The largest floating point value still inside the volume.
        uniform vec3f volumeExtents;

    };

    //! Create an instance of the accelerator container.
    GridAccelerator *uniform GridAccelerator_createInstance();

    //! Encode transfer function alpha values as a bit vector.
    void GridAccelerator_encodeTransferFunction(GridAccelerator *uniform accelerator, TransferFunction *uniform transferFunction);

    //! Quantize and encode a volumetric value in a bit vector.
    void GridAccelerator_encodeValue(GridAccelerator *uniform accelerator, const varying vec3f &coordinates, varying float value);

    //! Step a ray through the accelerator until a cell with visible volumetric elements is found.
    void GridAccelerator_intersect(GridAccelerator *uniform accelerator, uniform float step, varying Ray &ray);

    //! Set the volumetric value range.
    inline void GridAccelerator_setValueRange(GridAccelerator *uniform accelerator, const uniform vec2f &valueRange) { accelerator->valueRange = valueRange; }

    //! Allocate storage for the grid.
    void GridAccelerator_setVolumeDimensions(GridAccelerator *uniform accelerator, const uniform vec3i &volumeDimensions);

#endif // GRID_ACCELERATOR_IH

