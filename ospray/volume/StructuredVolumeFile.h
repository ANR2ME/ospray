//
//                 INTEL CORPORATION PROPRIETARY INFORMATION
//
//    This software is supplied under the terms of a license agreement or
//    nondisclosure agreement with Intel Corporation and may not be copied
//    or disclosed except in accordance with the terms of that agreement.
//    Copyright (C) 2014 Intel Corporation. All Rights Reserved.
//

#pragma once

#include <string>
#include "ospray/common/managed.h"
#include "ospray/volume/StructuredVolume.h"

//! \brief Define a function to create an instance of the InternalClass
//!  associated with ExternalName.
//!
//! \internal The function generated by this macro is used to create an
//!  instance of a concrete subtype of an abstract base class.  This
//!  macro is needed since the subclass type may not be known to OSPRay
//!  at build time.  Rather, the subclass can be defined in an external
//!  module and registered with OSPRay using this macro.
//! 
#define OSP_REGISTER_STRUCTURED_VOLUME_FILE(InternalClass, ExternalName) \
    extern "C" StructuredVolumeFile *ospray_create_structured_volume_file_##ExternalName(const std::string &filename) { return(new InternalClass(filename)); }

namespace ospray {

    //! \brief A StructuredVolumeFile is an abstraction for the concrete
    //!  object which is used to load structured volume data from a file.
    //!
    //!  The format of the volume data stored in a file on disk is unknown
    //!  to this class.  Subclasses implement loaders for specific formats,
    //!  and the actual subclass used is determined from the file extension.
    //!  This subclass must be registered in OSPRay proper, or in a loaded
    //!  module via OSP_REGISTER_STRUCTURED_VOLUME_FILE.
    //!
    class StructuredVolumeFile : public ManagedObject {
    public:

        //! Constructor.
        StructuredVolumeFile() {};

        //! Destructor.
        virtual ~StructuredVolumeFile() {};

        //! Create a StructuredVolumeFile object of the subtype indicated by the file extension.
        static StructuredVolumeFile *open(const std::string &filename);

        //! Get the volume dimensions.
        virtual vec3i getVolumeDimensions() = 0;

        //! Copy data from the file into memory.
        virtual void getVoxelData(void **buffer) = 0;

        //! Copy data from the file into the volume.
        virtual void getVoxelData(StructuredVolume *volume) = 0;

        //! Get the voxel spacing.
        virtual vec3f getVoxelSpacing() = 0;

        //! Get the voxel type string.
        virtual std::string getVoxelType() = 0;

        //! A string description of this class.
        virtual std::string toString() const { return("ospray::StructuredVolumeFile<abstract base class>"); }

    };

} // namespace ospray

